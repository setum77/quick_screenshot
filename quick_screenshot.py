# C:\cmd\quick_screenshot.py
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–º–æ—â—å—é –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à.
- –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: Alt + PrtSc    
- –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞: Ctrl + Alt + Q
- –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: screenshots_folder - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ú–æ–∏ —Ä–∏—Å—É–Ω–∫–∏\–°–∫—Ä–∏–Ω—à–æ—Ç—ã" –∏–ª–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å
- –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤: PNG
- –ò–∫–æ–Ω–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º
- –¢—Ä–µ–±—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pyautogui, keyboard, pystray, pillow, plyer, pywin32
"""

import os
import sys
import time
import threading
import warnings
from datetime import datetime
from pathlib import Path

import keyboard
from PIL import Image, ImageDraw
from pystray import Icon, Menu, MenuItem

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore")


class ScreenshotService:
    def __init__(self, folder):
        self.folder = folder
        self.running = False
        self.registered_hotkey = None
        self.tray_icon = None
        self.keyboard_thread = None
        os.makedirs(self.folder, exist_ok=True)
        
    def _get_window_rect(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        import win32gui
        hwnd = win32gui.GetForegroundWindow()
        if not hwnd:
            return None
        return win32gui.GetWindowRect(hwnd)
    
    def _create_bitmap_screenshot(self, left, top, width, height):
        """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ Win32 API"""
        import win32gui
        import win32ui
        import win32con
        
        hwndDC = win32gui.GetWindowDC(0)
        mfcDC = win32ui.CreateDCFromHandle(hwndDC)
        saveDC = mfcDC.CreateCompatibleDC()
        
        saveBitMap = win32ui.CreateBitmap()
        saveBitMap.CreateCompatibleBitmap(mfcDC, width, height)
        saveDC.SelectObject(saveBitMap)
        
        result = saveDC.BitBlt(
            (0, 0), 
            (width, height), 
            mfcDC, 
            (left, top),
            win32con.SRCCOPY
        )
        
        if result is None:
            bmpinfo = saveBitMap.GetInfo()
            bmpstr = saveBitMap.GetBitmapBits(True)
            
            im = Image.frombuffer(
                'RGB',
                (bmpinfo['bmWidth'], bmpinfo['bmHeight']),
                bmpstr, 'raw', 'BGRX', 0, 1
            )
            
            win32gui.DeleteObject(saveBitMap.GetHandle())
            saveDC.DeleteDC()
            mfcDC.DeleteDC()
            win32gui.ReleaseDC(0, hwndDC)
            
            return im
        return None

    def get_active_window_screenshot(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GetSystemMetrics –¥–ª—è DPI"""
        try:
            import ctypes
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DPI awareness
            ctypes.windll.user32.SetProcessDPIAware()
            
            rect = self._get_window_rect()
            if not rect:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ")
                return None
            
            left, top, right, bottom = rect
            width = right - left
            height = bottom - top
            
            print(f"üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞: ({left}, {top}, {right}, {bottom})")
            print(f"üìè –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞: {width}x{height}")
            
            screenshot = self._create_bitmap_screenshot(left, top, width, height)
            if screenshot:
                return screenshot
                
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞")
            return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Win32 –º–µ—Ç–æ–¥–∞: {e}")
            return self._simple_dpi_screenshot()

    def _simple_dpi_screenshot(self):
        """–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Å pyautogui"""
        try:
            import pyautogui
            import ctypes
            
            # –í–∫–ª—é—á–∞–µ–º DPI awareness
            ctypes.windll.user32.SetProcessDPIAware()
            
            rect = self._get_window_rect()
            if not rect:
                return None
            
            left, top, right, bottom = rect
            width = right - left
            height = bottom - top
            
            print(f"üìê PyAutoGUI –º–µ—Ç–æ–¥: {width}x{height}")
            
            return pyautogui.screenshot(region=(left, top, width, height))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PyAutoGUI: {e}")
            return self._fallback_screenshot()
    
    def _fallback_screenshot(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ pyautogui - –∑–∞—Ö–≤–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            import pyautogui
            
            rect = self._get_window_rect()
            if not rect:
                return None
            
            left, top, right, bottom = rect
            width = right - left
            height = bottom - top
            
            print(f"üìê –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ (–ø–æ–ª–Ω–æ–µ –æ–∫–Ω–æ): {width}x{height}")
            
            return pyautogui.screenshot(region=(left, top, width, height))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
            return None
    
    def _get_window_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ"""
        try:
            import win32gui
            hwnd = win32gui.GetForegroundWindow()
            window_title = win32gui.GetWindowText(hwnd)
            
            rect = self._get_window_rect()
            if rect:
                left, top, right, bottom = rect
                width = right - left
                height = bottom - top
                print(f"   üìã –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {window_title}")
                print(f"   üìè –†–∞–∑–º–µ—Ä—ã: {width}x{height}")
                
        except Exception as e:
            print(f"   ‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ: {e}")
    
    def take_screenshot(self):
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        filename = f"window_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        full_path = os.path.join(self.folder, filename)
        
        try:
            print("üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            self._get_window_info()
            
            screenshot = self.get_active_window_screenshot()
            
            if screenshot:
                screenshot.save(full_path)
                print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                self.show_notification("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", f"–ü–æ–ª–Ω–æ–µ –æ–∫–Ω–æ: {filename}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
                self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            self.show_notification("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
    
    def show_notification(self, title, message):
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ plyer"""
        try:
            from plyer import notification
            notification.notify(
                title=title,
                message=message,
                timeout=2,
                app_name="–°–µ—Ä–≤–∏—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–∫–æ–Ω"
            )
        except ImportError:
            print(f"üí° {title}: {message}")
    
    def _create_tray_image(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ"""
        image = Image.new('RGB', (64, 64), color='blue')
        draw = ImageDraw.Draw(image)
        draw.rectangle([16, 16, 48, 48], fill='white', outline='black')
        return image
    
    def create_tray_icon(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ"""
        image = self._create_tray_image()
        
        menu = Menu(
            MenuItem('–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª–Ω–æ–≥–æ –æ–∫–Ω–∞ (Alt + Print Screen)', self.take_screenshot),
            MenuItem('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏', self.open_folder),
            MenuItem('–í—ã—Ö–æ–¥', self.exit_app)
        )
        
        self.tray_icon = Icon("screenshot_service", image, "–°–µ—Ä–≤–∏—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω", menu)
        return self.tray_icon
    
    def open_folder(self, icon=None, item=None):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
        try:
            os.startfile(self.folder)
            print(f"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {self.folder}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
    
    def exit_app(self, icon=None, item=None):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        try:
            keyboard.unhook_all()
        except:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ
        if self.tray_icon:
            try:
                self.tray_icon.stop()
            except:
                pass
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
        time.sleep(0.5)
        print("üëã –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        os._exit(0)
    
    def _register_hotkey_combinations(self, combinations, callback):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        for combo in combinations:
            try:
                keyboard.add_hotkey(combo, callback)
                print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: {combo}")
                return combo
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å {combo}: {e}")
        return None
    
    def keyboard_listener(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è Print Screen
        main_combinations = [
            'alt+print screen',
            'alt+printscreen', 
            'alt+prtsc',
        ]
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        alt_combinations = ['ctrl+alt+a', 'f11', 'ctrl+f11']
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É
        self.registered_hotkey = self._register_hotkey_combinations(main_combinations, self.take_screenshot)
        
        if not self.registered_hotkey:
            print("‚ö†Ô∏è  –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏...")
            self.registered_hotkey = self._register_hotkey_combinations(alt_combinations, self.take_screenshot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
        keyboard.add_hotkey('ctrl+alt+q', self.exit_app)
        
        print("\nüéπ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:")
        if self.registered_hotkey:
            print(f"   {self.registered_hotkey} - —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        print("   Ctrl + Alt + Q - –≤—ã—Ö–æ–¥")
        print("‚îÄ" * 50)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ keyboard.wait()
        try:
            while self.running:
                time.sleep(0.5)
        except KeyboardInterrupt:
            self.exit_app()
    
    def start_tray_icon(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not self.tray_icon:
                self.create_tray_icon()
            self.tray_icon.run()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ: {e}")
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–∫–æ–Ω–∫–∏
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"""
        self.running = True
        
        print("üöÄ –°–µ—Ä–≤–∏—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ–ª–Ω—ã—Ö –æ–∫–æ–Ω –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {self.folder}")
        print("üìç –ò–∫–æ–Ω–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ")
        print("‚îÄ" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
        self.keyboard_thread = threading.Thread(target=self.keyboard_listener, daemon=True)
        self.keyboard_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
        try:
            self.start_tray_icon()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ: {e}")
            print("üí° –°–µ—Ä–≤–∏—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∂–¥–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            try:
                while self.running:
                    time.sleep(1)
            except KeyboardInterrupt:
                self.exit_app()


def get_my_pictures_path():
    """–ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ '–ú–æ–∏ —Ä–∏—Å—É–Ω–∫–∏'"""
    try:
        user_profile = os.environ['USERPROFILE']
        pictures_path = os.path.join(user_profile, 'Pictures')
        
        if os.path.exists(pictures_path):
            print('üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ "–ú–æ–∏ —Ä–∏—Å—É–Ω–∫–∏":', pictures_path)
            return pictures_path
        else:
            pictures_path = Path.home() / 'Pictures'
            return str(pictures_path)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏: {e}")
        return os.getcwd()


# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ '–ú–æ–∏ —Ä–∏—Å—É–Ω–∫–∏'
pictures_path = get_my_pictures_path()
screenshots_folder = os.path.join(pictures_path, '–°–∫—Ä–∏–Ω—à–æ—Ç—ã')

# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å, –∑–∞–∫–æ–º–º–µ–Ω–∏—Ç—Ä–æ–≤–∞–≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ
# screenshots_folder = r"d:\my_folder\pic\screenshot\"


# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(screenshots_folder, exist_ok=True)

if __name__ == "__main__":
    service = ScreenshotService(screenshots_folder)
    service.start()